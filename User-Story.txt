
Requirements:

Make a Calculator

Functionality Input 2 whole numbers as argument

calculate Results 



User Journey Mapping:

Calculator:

iteration 1:
1. Reflexive: return same as an input -->> 54^35 as a string (different data)

iteration 2:
2. Addition: whole number addition arguments --->> 4 + 4 as a string

iteration 3:
3. Multiplication: whole number multiplication --->> 2 * 2 as a string

iteration 4:
4. Division: whole number division ---> 4 / 2 as a string


























Solution 1:

class ReflexiveTests {
    private final Calculator calculator = new Calculator();

    @Test
    void BlankIsBlank() {
        assertEquals("", calculator.eval(""));
    }

    @Test
    void ZeroIsZero() {
        assertEquals("0", calculator.eval("0"));
    }

    @Test
    void TwoIsTwo() {
        assertEquals("2", calculator.eval("2"));
    }

    @Test
    void WhitespaceOneIsOne() {
        assertEquals("2", calculator.eval(" 2"));
    }

    @Test
    void NegativeFiveIsReflexive() {
        assertEquals("-5", calculator.eval("-5"));
    }
}




















Soution 2:

class BasicAdditionTests {

// Hint: Use the Spaces
// e.g. the test is "1 + 1" not "1+1"

    private final Calculator calculator = new Calculator();

    @Test
    void ZeroPlusZeroIsZero() {
        assertEquals("0", calculator.eval("0 + 0"));
    }

    @Test
    void TwoPlusTwoIsFour() {
        assertEquals("4", calculator.eval("2 + 2"));
    }
}














Soution 3:
class BasicMultiplicationTests {
    private final Calculator calculator = new Calculator();

    @Test
    void TwoTimesZeroIsZero() {
        assertEquals("0", calculator.eval("2 * 0"));
    }

    @Test
    void TwoTimesOneIsTwo() {
        assertEquals("2", calculator.eval("2 * 1"));
    }

}












Soution 4:
class BasicDivisionTests {
    private final Calculator calculator = new Calculator();

    @Test
    void OneDividedByZero() {
        assertThrows(ArithmeticException.class, () -> {
          calculator.eval("1 / 0");
      });
    }
}
